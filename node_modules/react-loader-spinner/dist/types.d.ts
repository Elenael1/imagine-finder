import React, { FunctionComponent } from "react";
type Style = {
    [key: string]: string;
};
interface BaseProps {
    height?: string | number;
    width?: string | number;
    color?: string;
    ariaLabel?: string;
    wrapperStyle?: Style;
    wrapperClass?: string;
    visible?: boolean;
}
interface HourglassProps extends Omit<BaseProps, 'color'> {
    colors?: [string, string];
}
export function Hourglass({ visible, width, height, wrapperClass, wrapperStyle, ariaLabel, colors, }: HourglassProps): React.JSX.Element | null;
interface BlocksProps extends BaseProps {
}
export function Blocks({ visible, width, height, wrapperClass, wrapperStyle, ariaLabel, }: BlocksProps): React.JSX.Element | null;
interface CommentProps extends BaseProps {
    backgroundColor?: string;
}
export function Comment({ visible, width, height, backgroundColor, color, wrapperClass, wrapperStyle, ariaLabel, }: CommentProps): React.JSX.Element | null;
interface ColorRingProps extends Omit<BaseProps, 'color'> {
    colors?: [string, string, string, string, string];
}
export function ColorRing({ visible, width, height, colors, wrapperClass, wrapperStyle, ariaLabel, }: ColorRingProps): React.JSX.Element | null;
interface DiscussProps extends Omit<BaseProps, 'color'> {
    colors?: [string, string];
}
export function Discuss({ visible, width, height, wrapperClass, wrapperStyle, ariaLabel, colors }: DiscussProps): React.JSX.Element | null;
interface FidgetSpinnerProps extends Omit<BaseProps, 'color'> {
    backgroundColor?: string;
    ballColors?: [string, string, string];
}
export function FidgetSpinner({ width, height, backgroundColor, ballColors, wrapperClass, wrapperStyle, ariaLabel, visible, }: FidgetSpinnerProps): React.JSX.Element | null;
interface MagnifyingGlassProps extends BaseProps {
    glassColor?: string;
}
export function MagnifyingGlass({ visible, height, width, wrapperClass, wrapperStyle, ariaLabel, glassColor, color, }: MagnifyingGlassProps): React.JSX.Element | null;
interface ProgressBarProps extends Omit<BaseProps, 'color'> {
    borderColor?: string;
    barColor?: string;
}
export function ProgressBar({ visible, height, width, wrapperClass, wrapperStyle, ariaLabel, borderColor, barColor, }: ProgressBarProps): React.JSX.Element | null;
interface RadioProps extends Omit<BaseProps, 'color'> {
    colors?: [string, string, string];
}
export function Radio({ visible, height, width, wrapperClass, wrapperStyle, ariaLabel, colors, }: RadioProps): React.JSX.Element | null;
interface RotatingTrianglesProps extends Omit<BaseProps, 'color'> {
    colors?: [string, string, string];
}
export function RotatingTriangles({ visible, height, width, wrapperClass, wrapperStyle, ariaLabel, colors, }: RotatingTrianglesProps): React.JSX.Element | null;
interface VortexProps extends Omit<BaseProps, 'color'> {
    colors?: [string, string, string, string, string, string];
}
export const Vortex: ({ visible, height, width, ariaLabel, wrapperStyle, wrapperClass, colors, }: VortexProps) => React.JSX.Element | null;
type FallingLinesProps = {
    color?: string;
    width?: string;
    height?: string;
    visible?: boolean;
};
export const FallingLines: ({ color, width, visible, }: FallingLinesProps) => React.ReactElement | null;
interface WatchProps extends BaseProps {
    radius?: string | number;
}
export const Watch: FunctionComponent<WatchProps>;
/** Styles Ends */
type TriangleProps = BaseProps;
export const Triangle: FunctionComponent<TriangleProps>;
interface ThreeDotsProps extends BaseProps {
    radius?: string | number;
}
export const ThreeDots: FunctionComponent<ThreeDotsProps>;
type Props = {
    wrapperStyle?: Style;
    visible?: boolean;
    wrapperClass?: string;
    height?: string | number;
    width?: string | number;
    color?: string;
    outerCircleColor?: string;
    innerCircleColor?: string;
    middleCircleColor?: string;
    ariaLabel?: string;
};
/**
 * @description contains three circles rotating in opposite direction
 * outer circle, middle circle and inner circle color can be set from props.
 */
export const ThreeCircles: React.FunctionComponent<Props>;
interface TailSpinProps extends BaseProps {
    radius?: string | number;
    strokeWidth?: string | number;
}
export const TailSpin: FunctionComponent<TailSpinProps>;
type _Props1 = {
    width?: string;
    visible?: boolean;
    strokeWidth?: string;
    strokeColor?: string;
    animationDuration?: string;
    ariaLabel?: string;
};
export function RotatingLines({ strokeColor, strokeWidth, animationDuration, width, visible, ariaLabel, }: _Props1): React.ReactElement | null;
type RotatingSquareProps = {
    wrapperClass?: string;
    color?: string;
    strokeWidth?: string | number;
    height?: string | number;
    width?: string | number;
    ariaLabel?: string;
    wrapperStyle?: Style;
    visible?: boolean;
};
export const RotatingSquare: React.FunctionComponent<RotatingSquareProps>;
interface RingsProps extends BaseProps {
    radius?: string | number;
}
export const Rings: FunctionComponent<RingsProps>;
interface RevolvingDotProps extends BaseProps {
    radius?: number;
    secondaryColor?: string;
    strokeWidth?: number;
}
export const RevolvingDot: FunctionComponent<RevolvingDotProps>;
interface PuffProps extends BaseProps {
    radius?: string | number;
    secondaryColor?: string;
}
export const Puff: FunctionComponent<PuffProps>;
interface OvalProps extends BaseProps {
    strokeWidth?: string | number;
    strokeWidthSecondary?: string | number;
    secondaryColor?: string;
}
export const Oval: FunctionComponent<OvalProps>;
interface MutatingDotsProps extends BaseProps {
    radius?: string | number;
    secondaryColor?: string;
}
export const MutatingDots: FunctionComponent<MutatingDotsProps>;
type _Props2 = {
    wrapperStyle?: Style;
    visible?: boolean;
    wrapperClass?: string;
    height?: string | number;
    width?: string | number;
    color?: string;
    firstLineColor?: string;
    middleLineColor?: string;
    lastLineColor?: string;
    ariaLabel?: string;
};
/**
 * @description contains three lines in a wave motion
 * line colors are changeable
 */
export const LineWave: React.FunctionComponent<_Props2>;
type _Props3 = {
    color?: string;
    width?: string;
};
export const InfinitySpin: ({ color, width, }: _Props3) => React.ReactElement;
interface HeartsProps extends BaseProps {
}
export const Hearts: FunctionComponent<HeartsProps>;
interface GridProps extends BaseProps {
    radius?: string | number;
}
export const Grid: FunctionComponent<GridProps>;
type _Props4 = {
    wrapperStyle?: Style;
    visible?: boolean;
    wrapperClass?: string;
    height?: string | number;
    width?: string | number;
    color?: string;
    outerCircleColor?: string;
    innerCircleColor?: string;
    barColor?: string;
    ariaLabel?: string;
};
/**
 * @description contains two circles rotating in opposite direction
 * and a wave bars. outer circle, inner circle and bar
 * color can be set from props.
 */
export const CirclesWithBar: React.FunctionComponent<_Props4>;
interface CirclesProps extends BaseProps {
}
export const Circles: FunctionComponent<CirclesProps>;
interface BarsProps extends BaseProps {
}
export const Bars: FunctionComponent<BarsProps>;
interface BallTriangleProps extends BaseProps {
    radius?: string | number;
}
export const BallTriangle: FunctionComponent<BallTriangleProps>;
interface AudioProps extends BaseProps {
}
export const Audio: FunctionComponent<AudioProps>;
interface DNAProps extends Omit<BaseProps, 'color'> {
}
export const DNA: ({ visible, width, height, wrapperClass, wrapperStyle, ariaLabel, }: DNAProps) => React.JSX.Element | null;

//# sourceMappingURL=types.d.ts.map
